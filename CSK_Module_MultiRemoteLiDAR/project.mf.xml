<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<manifest>
    <application name="CSK_Module_MultiRemoteLiDAR">
        <crown name="CSK_Module_MultiRemoteLiDAR">
            <desc>This is an automatically generated CROWN (description not necessary).</desc>
        </crown>
        <crown name="CSK_MultiRemoteLiDAR">
            <trait>released</trait>
            <desc>Module to provide RemoteScan configuration functionality. +
Multiple instances can be created and scan processing will run in multiple threads on the device. +
Incoming scans can be used / processed in other apps / modules. +
Typically the features of this module are used like this (check also main script of this module): +
{empty} +
**1) Setup** +
1) If multiple scanner instances are available, selecte a specific sensor via "setSelectedInstance" +
2) Set interface type to connect to sensor via "setInterface" +
3) Optionally set sensor IP via "setIP" if interface is "ETHERNET" +
4) Start sensor camera via "startSensor" +
5) Other modules can register on the "OnNewScan"-event by getting the Scan provider handle via "getLiDARHandle" (before they can check the instance amount via "getInstancesAmount") +
{empty} +
**2) Access from other applications** +
You can process incoming scans in other modules by getting the Scan handle via 'getLiDARHandle' and registering to its "OnNewScan"-event to get them directly wihtin your app. +
{empty} +
**3) Merge with encoder data** +
It is possible to merge incoming scan data with the data of a connected encoder. It is needed to run the CSK_Module_Encoder in parallel. +
Activate it via "setEncoderMode". It is possible to configure the duration of the measurement via "setEncoderDurationMode(Value)". +
Additionally you can trigger this measurement via a predefined event from another app (see "setEncoderTriggerEvent"). +
After the measurement was finished, it will provide the result as a PointCloud within the "OnNewEncoderScan[NUM]" event. +</desc>
            <enum name="Interface" trait="released">
                <desc>Interface used to connect to the LiDAR sensor.</desc>
                <item desc="Ethernet" name="ETHERNET">ETHERNET</item>
                <item desc="Serial" name="SERIAL">SERIAL</item>
            </enum>
            <enum name="SensorType" trait="released">
                <desc>Type of the LiDAR sensor.</desc>
                <item desc="Default standard LMS type for LMS100,LMS500,TIM." name="LMSX00">LMSX00</item>
                <item desc="Special type for LD-MRS." name="LD_MRS">LD_MRS</item>
                <item desc="Special type for S300 and S3000." name="S300">S300</item>
                <item desc="Special type for MicroScan." name="MICRO_SCAN">MICRO_SCAN</item>
                <item desc="Type to disable this provider." name="NO_SENSOR">NO_SENSOR</item>
                <item desc="Special type for LMS4000 scanner." name="LMS4XXX">LMS4XXX</item>
                <item desc="Will use default standard LMS type but with special processing." name="MRS1000">MRS1000</item>
            </enum>
            <enum name="EncoderDurationMode" trait="released">
                <desc>Duration mode for encoder measurement.</desc>
                <item desc="Encoder ticks" name="TICKS">TICKS</item>
            </enum>
            <serves>
                <event name="OnNewStatusLoadParameterOnReboot">
                    <desc>Notify status if parameters should be loaded on app/device boot up.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnPersistentDataModuleAvailable">
                    <desc>Notify status if features of CSK_PersistentData module are available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewInstanceList">
                    <desc>Event to provide list of created instances.</desc>
                    <param desc="List of created instances." multiplicity="1" name="list" type="string"/>
                </event>
                <event name="OnNewProcessingParameter">
                    <desc>Event to share processing parameters to the instances.</desc>
                    <param desc="Number of the instance to receive the parameter." multiplicity="1" name="objectNo" type="int"/>
                    <param desc="Name of the parameter." multiplicity="1" name="parameter" type="string"/>
                    <param desc="value of the parameter." multiplicity="1" name="value" type="auto"/>
                    <param desc="If parameter is for specifici internal used object, its nnumber." multiplicity="?" name="internalObjectNo" type="int"/>
                </event>
                <event name="OnNewSelectedInstance">
                    <desc>Notify if new instance is selected.</desc>
                    <param desc="Selected instance." multiplicity="1" name="selectedObject" type="int"/>
                </event>
                <event name="OnDataLoadedOnReboot">
                    <desc>Event to call if module tried to load parameters and should be ready.</desc>
                </event>
                <event name="OnNewResultNUM">
                    <desc>Example of dynamically created event to provide result of instance. +
NUM will be replaced by the number of instance (e.g. "OnNewResult1"). +
INFO: Other modules can check via "Script.isServedAsEvent" if event of sepecific instance exists.</desc>
                    <param desc="Result" multiplicity="1" name="result" type="bool"/>
                </event>
                <event name="OnNewParameterName">
                    <desc>Notify name of persistent data parameter.</desc>
                    <param desc="Parameter name" multiplicity="1" name="name" type="string"/>
                </event>
                <event name="OnUserLevelOperatorActive">
                    <desc>Status of Operator userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnUserLevelMaintenanceActive">
                    <desc>Status of Maintenance userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnUserLevelServiceActive">
                    <desc>Status of Service userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnUserLevelAdminActive">
                    <desc>Status of Admin userlevel. Used internally in combination with the CSK_UserManagement module if available.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewValueUpdateNUM">
                    <desc>Example of dynamically created event to sync paramters between instance threads and Controller part of module. +
NUM will be replaced by the number of instance (e.g. "OnNewResult1"). +</desc>
                    <param desc="Instance new value is coming from." multiplicity="1" name="instance" type="int"/>
                    <param desc="Name of the paramter to update/sync." multiplicity="1" name="parameter" type="string"/>
                    <param desc="Value to update." multiplicity="1" name="value" type="auto"/>
                    <param desc="Optionally if internal parameter should be used for internal objects." multiplicity="?" name="selectedObject" type="int"/>
                </event>
                <event name="OnNewValueToForwardNUM">
                    <desc>Example of dynamically created event to forward data from instance thread to Controler part of module, e.g. to forward values to UI. +
NUM will be replaced by the number of instance (e.g. "OnNewResult1").</desc>
                    <param desc="Eventname to use to forward value." multiplicity="1" name="eventname" type="string"/>
                    <param desc="Value to forward." multiplicity="1" name="value" type="auto"/>
                </event>
                <event name="OnNewResult">
                    <desc>Generic event to notify results. E.g. to forward results from single instances.</desc>
                    <param desc="Result" multiplicity="1" name="result" type="bool"/>
                </event>
                <event name="OnDeregisterLiDARSensorNUM">
                    <desc>Example of dynamically created event to deregister LiDAR sensor intsance to scan processing function. +
NUM will be replaced by the number of instance (e.g. "OnDeregisterLiDARSensor1"). +
INFO: Other modules can check via "Script.isServedAsEvent" if event of sepecific instance exists.</desc>
                    <param alias="Scan.Provider.RemoteScanner" desc="LiDAR sensor instance to deregister." multiplicity="1" name="lidarSensor" type="handle"/>
                </event>
                <event name="OnRegisterLiDARSensorNUM">
                    <desc>Example of dynamically created event to register LiDAR sensor intsance to scan processing function. +
NUM will be replaced by the number of instance (e.g. "OnRegisterLiDARSensor1"). +
INFO: Other modules can check via "Script.isServedAsEvent" if event of sepecific instance exists.</desc>
                    <param alias="Scan.Provider.RemoteScanner" desc="LiDAR sensor instance to register." multiplicity="1" name="lidarSensor" type="handle"/>
                </event>
                <event name="OnNewViewerID">
                    <desc>Notify currently used viewerID (e.g. to show correct viewer in UI).</desc>
                    <param desc="viewerID" multiplicity="1" name="viewerID" type="string"/>
                </event>
                <event name="OnNewStatusInterface">
                    <desc>Notify interface of currently selected sensor.</desc>
                    <param desc="Interface" multiplicity="1" name="interface" type="string"/>
                </event>
                <event name="OnNewStatusSensorIP">
                    <desc>Notify IP of currently selected sensor.</desc>
                    <param desc="IP" multiplicity="1" name="ip" type="string"/>
                </event>
                <event name="OnNewStatusSensorType">
                    <desc>Notify type of sensor.</desc>
                    <param desc="Sensor type" multiplicity="1" name="sensorType" type="string"/>
                </event>
                <event name="OnNewStatusIPError">
                    <desc>Notify if configured IP is faulty.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewStatusInternalProcessing">
                    <desc>Notify if incoming scans are processed in this module.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewStatusInstanceAmount">
                    <desc>Notify amount of instances.</desc>
                    <param desc="Amount of instances." multiplicity="1" name="amoun" type="int"/>
                </event>
                <event name="OnNewStatusViewerType">
                    <desc>Notify type of currently active viewer.</desc>
                    <param desc="Type of viewer." multiplicity="1" name="type" type="string"/>
                </event>
                <event name="OnNewScanViewerID">
                    <desc>Notify currently used scanViewerID (e.g. to show correct viewer in UI).</desc>
                    <param desc="viewerID" multiplicity="1" name="viewerID" type="string"/>
                </event>
                <event name="OnNewStatusEncoderMode">
                    <desc>Notify if sensor data shoud be combined with encoder data.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewStatusEncoderDurationMode">
                    <desc>Notify encoder duration mode.</desc>
                    <param desc="Mode" multiplicity="1" name="mode" type="string"/>
                </event>
                <event name="OnNewStatusEncoderDurationModeValue">
                    <desc>Notify related value for encoderDurationMode.</desc>
                    <param desc="Value (ticks)" multiplicity="1" name="value" type="int"/>
                </event>
                <event name="OnNewEncoderScanNUM">
                    <desc>Notify scan data merged with encoder data
Example of dynamically created event to provide scan data merged with encoder info if encoderMode is active. +
NUM will be replaced by the number of instance (e.g. "OnNewEncoderScan1"). +
INFO: Other modules can check via "Script.isServedAsEvent" if event of sepecific instance exists.</desc>
                    <param alias="PointCloud" desc="PointCloud" multiplicity="1" name="mergedScan" type="object"/>
                </event>
                <event name="OnNewStatusEncoderModeLoop">
                    <desc>Notify if the module should automatically retrigger encoder measurements.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewStatusViewerActive">
                    <desc>Notify if scan should be shown in viewer.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </event>
                <event name="OnNewStatusEncoderTriggerEvent">
                    <desc>Notify event to start encoder scan measurement if notified.</desc>
                    <param desc="Name of event" multiplicity="1" name="event" type="string"/>
                </event>
                <event name="OnNewStatusAngleFilter">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </event>
                <event name="OnNewValueAngleFilterStartAngle">
                    <desc/>
                    <param desc="" multiplicity="1" name="startAngle" type="string"/>
                </event>
                <event name="OnNewValueAngleFilterStopAngle">
                    <desc/>
                    <param desc="" multiplicity="1" name="stopAngle" type="string"/>
                </event>
                <event name="OnNewStatusMeanFilterScans">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </event>
                <event name="OnNewStatusMeanFilterBeams">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </event>
                <event name="OnNewValueMeanFilterScans">
                    <desc/>
                    <param desc="" multiplicity="1" name="scans" type="string"/>
                </event>
                <event name="OnNewValueMeanFilterBeams">
                    <desc/>
                    <param desc="" multiplicity="1" name="beams" type="string"/>
                </event>
                <event name="OnNewStatusResolutionHalving">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </event>
                <event name="OnNewStatusEdgeDetection">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </event>
                <event name="OnNewValueGabThreshold">
                    <desc/>
                    <param desc="" multiplicity="1" name="gabThreshold" type="string"/>
                </event>
                <event name="OnNewValueGradientThreshold">
                    <desc/>
                    <param desc="" multiplicity="1" name="gradientThreshold" type="string"/>
                </event>
                <event name="OnNewStatusFixedPoint">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </event>
                <event name="OnNewValuePointA">
                    <desc/>
                    <param desc="" multiplicity="1" name="pointA" type="string"/>
                </event>
                <event name="OnNewValuePointB">
                    <desc/>
                    <param desc="" multiplicity="1" name="pointB" type="string"/>
                </event>
                <event name="OnActivateStartAndStopLiDAROnUI">
                    <desc/>
                    <param desc="" multiplicity="1" name="deactivated" type="bool"/>
                </event>
                <event name="OnNewEdgeDetectionResults">
                    <desc/>
                    <param desc="" multiplicity="1" name="instanceNumber" type="int"/>
                    <param desc="" multiplicity="1" name="gab" type="float"/>
                    <param desc="" multiplicity="1" name="height" type="float"/>
                    <param desc="" multiplicity="1" name="angle" type="float"/>
                </event>
                <event name="OnNewFixedPointResults">
                    <desc/>
                    <param desc="" multiplicity="1" name="instance" type="int"/>
                    <param desc="" multiplicity="1" name="height" type="float"/>
                </event>
                <event name="OnNewValueEdgeDetectionGabUI">
                    <desc/>
                    <param desc="" multiplicity="1" name="gab" type="string"/>
                </event>
                <event name="OnNewValueEdgeDetectionHeightUI">
                    <desc/>
                    <param desc="" multiplicity="1" name="height" type="string"/>
                </event>
                <event name="OnNewValueEdgeDetectionAngleUI">
                    <desc/>
                    <param desc="" multiplicity="1" name="angle" type="string"/>
                </event>
                <event name="OnNewValueFixedPointHeightUI">
                    <desc/>
                    <param desc="" multiplicity="1" name="height" type="string"/>
                </event>
                <function name="setParameterName">
                    <desc>Function to set the name of the parameters if saved/loaded via the CSK_PersistentData module.</desc>
                    <param desc="Name of the parameter" multiplicity="1" name="name" type="string"/>
                </function>
                <function name="sendParameters">
                    <desc>Send parameters to CSK_PersistentData module if possible to save them.</desc>
                </function>
                <function name="loadParameters">
                    <desc>Load parameters for this module from the CSK_PersistentData module if possible and use them.</desc>
                </function>
                <function name="setLoadOnReboot">
                    <desc>Configure if this module should load its saved parameters at app/device boot up.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="pageCalled">
                    <desc>Function to register "OnResume" of the module UI (only as helper function).</desc>
                    <return desc="Empty string (only needed to simplify binding)." multiplicity="1" name="empty" type="string"/>
                </function>
                <function name="setSelectedInstance">
                    <desc>Select one of the multiple instances.</desc>
                    <param desc="Instance to select." multiplicity="1" name="instance" type="int"/>
                </function>
                <function name="getInstancesAmount">
                    <desc>Get the amount of created instances of this module.</desc>
                    <return desc="Amount of created instances." multiplicity="1" name="amount" type="int"/>
                </function>
                <function name="processInstanceNUM">
                    <desc>Example of dynamically served function to process internally coded function. +
NUM will be replaced by the number of instance (e.g. "processInstance1"). +
INFO: Other modules can check via "Script.isServedAsFunction" if function of sepecific instance exists. +
Needs then to be called via "Script.callFunction".</desc>
                    <param alias="Alias" desc="Transferred object (optional)." multiplicity="?" name="object" type="object"/>
                    <return desc="Processing result (optional)." multiplicity="?" name="result" type="bool"/>
                </function>
                <function name="addInstance">
                    <desc>Function to add an additional instance.</desc>
                </function>
                <function name="resetInstances">
                    <desc>Function to reset instances to one single instance.
IMPORTANT: As instances start their own threads, the module needs to be restarted if new instances are needed... (see AppEngine docu for "Script.startScript").</desc>
                </function>
                <function name="startLiDARSensor">
                    <desc>Function to start currently selected LiDAR sensor instance.</desc>
                </function>
                <function name="stopLiDARSensor">
                    <desc>Function to stop currently selected LiDAR sensor.</desc>
                </function>
                <function name="setInterface">
                    <desc>Function to set interface to LiDAR sensor.</desc>
                    <param desc="Interface" multiplicity="1" name="interface" ref="CSK_MultiRemoteLiDAR.Interface" type="enum"/>
                </function>
                <function name="setIP">
                    <desc>Function to set IP of LiDAR sensor.</desc>
                    <param desc="IP" multiplicity="1" name="ip" type="string"/>
                </function>
                <function name="setSensorType">
                    <desc>Function to set type of LiDAR sensor.</desc>
                    <param desc="Type of sensor" multiplicity="1" name="sensorType" ref="CSK_MultiRemoteLiDAR.SensorType" type="enum"/>
                </function>
                <function name="getLiDARHandle">
                    <desc>Function to return LiDAR scanner handle (to make use of it in other modules).</desc>
                    <param desc="Instance no of LiDAR sensor." multiplicity="1" name="instanceNo" type="int"/>
                    <return alias="Scan.Provider.RemoteScanner" desc="Handle of scan provider." multiplicity="?" name="lidarProvider" type="handle"/>
                </function>
                <function name="setInternalProcessing">
                    <desc>Function to configure if incomings scans should be processed in this module or just to provide them for other modules.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="setViewerType">
                    <desc>Function to set what kind of viewer to use.</desc>
                    <param desc="Type of viewer." multiplicity="1" name="viewerType" type="string"/>
                </function>
                <function name="setEncoderMode">
                    <desc>Function to activate encoder mode.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="setEncoderDurationMode">
                    <desc>Function to set encoder duration mode.</desc>
                    <param desc="Mode" multiplicity="1" name="mode" ref="CSK_MultiRemoteLiDAR.EncoderDurationMode" type="enum"/>
                </function>
                <function name="setEncoderDurationModeValue">
                    <desc>Function to configure encoder duration mode value.</desc>
                    <param desc="Value (related to configured encoderDurationMode)." multiplicity="1" name="value" type="int"/>
                </function>
                <function name="triggerEncoderMeasurement">
                    <desc>Function to trigger new encoder measurement.</desc>
                </function>
                <function name="setEncoderModeLoop">
                    <desc>Function to set if it automatically should retrigger an encoder measurement.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="setViewerActive">
                    <desc>Function to set if scan should be shown in viewer.</desc>
                    <param desc="Status" multiplicity="1" name="status" type="bool"/>
                </function>
                <function name="setEncoderTriggerEvent">
                    <desc>Function to set event to start encoder measurement if notified.</desc>
                    <param desc="Name of event" multiplicity="1" name="event" type="string"/>
                </function>
                <function name="setEnableAngleFilter">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </function>
                <function name="setStartAngle">
                    <desc/>
                    <param desc="" multiplicity="1" name="angleString" type="string"/>
                </function>
                <function name="setStopAngle">
                    <desc/>
                    <param desc="" multiplicity="1" name="angleString" type="string"/>
                </function>
                <function name="setMeanFilterScanDepthEnable">
                    <desc/>
                    <param desc="" multiplicity="1" name="enableMeanFilterScanDepth" type="bool"/>
                </function>
                <function name="setMeanFilterScanDepth">
                    <desc/>
                    <param desc="" multiplicity="1" name="filterScanDepthString" type="string"/>
                </function>
                <function name="setMeanFilterBeamsWidthEnabled">
                    <desc/>
                    <param desc="" multiplicity="1" name="enableMeanFilterBeamsWidth" type="bool"/>
                </function>
                <function name="setResolutionHalvingEnable">
                    <desc/>
                    <param desc="" multiplicity="1" name="state" type="bool"/>
                </function>
            </serves>
        </crown>
        <meta key="author">SICK AG</meta>
        <meta key="version">0.4.0</meta>
        <meta key="priority">low</meta>
        <meta key="copy-protected">false</meta>
        <meta key="read-protected">false</meta>
        <meta key="crown2-flow-engine">false</meta>
        <meta key="LuaLoadAllEngineAPI">false</meta>
        <entry default="CSK_Module_MultiRemoteLiDAR.lua" path="scripts"/>
    </application>
</manifest>
